<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<!-- Notice that configLocation is not needed when you use MapperFactoryBean 
		(it was in the tutorial; not from my head). -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- Data source is used by MyBatis to create a connection to a database. -->
		<property name="dataSource" ref="dataSource" />

		<!-- Configures the environment of MyBatis. -->
		<property name="configLocation" value="/WEB-INF/mybatis/config.xml" />
	</bean>


	<!-- MapperScannerConfigurer is used to publish the data service interfaces 
		(e.g. my.mybatis.persistence.UserService) defined for MyBatis as Spring Beans. 
		How: We just provide the package in which the interfaces and their XML mapping 
		files are. We can specify more than one package using common separator or 
		semicolon. As a result, we will be able to get instances of UserService via 
		@Autowired annotation. Note: We do not have to implement the above-mentioned 
		interfaces since MyBatis will provide their proxy implementation. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="my.mybatis.persistence" />
	</bean>

</beans>
